--Tyler's SQL assignment

--2.0 SQL Queries
--In this section you will be performing various queries against the Oracle Chinook database.


--2.1 SELECT
--Task – Select all records from the Employee table.
select * from employee;


--Task – Select all records from the Employee table where last name is King.
select * from employee where last_name = 'King';


--Task – Select all records from the Employee table where first name is Andrew and REPORTSTO is NULL.
select * from employee where first_name = 'Andrew' and reports_to is null;




--2.2 ORDER BY
--Task – Select all albums in Album table and sort result set in descending order by title.
select title from album order by title desc;


--Task – Select first name from Customer and sort result set in ascending order by city
select first_name, city from customer order by city asc;



--2.3 INSERT INTO
--Task – Insert two new records into Genre table
insert into genre (name) values ('Samba'),('Salsa');


--Task – Insert two new records into Employee table
insert into employee (last_name,first_name) values ('Jones','Jojo'),('Jones','Koko');


--Task – Insert two new records into Customer table
insert into customer (last_name,first_name,company,email) values ('Customer','Some','RealCompany','somecust@realco.com'),('Customer','Another','RealCompany','anothercust@realco.com');



--2.4 UPDATE
--Task – Update Aaron Mitchell in Customer table to Robert Walter
update customer set first_name = 'Robert', last_name = 'Walter' where first_name = 'Aaron' and last_name = 'Mitchell'; 

--Task – Update name of artist in the Artist table “Creedence Clearwater Revival” to “CCR”
update artist set name = 'CCR' where name = 'Creedence Clearwater Revival';


--2.5 LIKE
--Task – Select all invoices with a billing address like “T%”
select * from invoice where billing_address like 'T%';


--2.6 BETWEEN
--Task – Select all invoices that have a total between 15 and 50
select * from invoice where total between 15 and 50;
--or
select * from invoice where total >= 15 and total <= 50;



--Task – Select all employees hired between 1st of June 2003 and 1st of March 2004
select * from employee where hire_date between '2003-06-01' and '2004-03-01';



--2.7 DELETE
--Task – Delete a record in Customer table where the name is Robert Walter (There may be constraints that rely on this, find out how to resolve them).
alter table invoice drop constraint fk_invoice_customer_id;
alter table invoice add foreign key (customer_id) references customer(customer_id) on delete set null;
alter table customer drop constraint pk_customer cascade;
delete from customer where first_name = 'Robert' and last_name = 'Walter';


--7.0 JOINS
--In this section you will be working with combining various tables through the use of joins. You will work with outer, inner, right, left, cross, and self joins.


--7.1 INNER
--Task – Create an inner join that joins customers and invoice and specifies the name of the customer and the invoiceId.
select customer.first_name, customer.last_name, invoice.invoice_id 
    from customer inner join invoice on (customer.customer_id = invoice.customer_id);


   
--7.2 OUTER
--Task – Create an outer join that joins the customer and invoice table, specifying the CustomerId, firstname, lastname, invoiceId, and total.
select customer.customer_id, customer.first_name, customer.last_name, invoice.invoice_id, invoice.total 
    from customer left outer join invoice on (customer.customer_id = invoice.customer_id);

   

--7.3 RIGHT
--Task – Create a right join that joins album and artist specifying artist name and title.
select artist."name", album.title
    from album right outer join artist on (artist.artist_id = album.artist_id);

   

--7.4 CROSS
--Task – Create a cross join that joins album and artist and sorts by artist name in ascending order.
select * from album cross join artist order by artist.name asc;


--7.5 SELF
--Task – Perform a self-join on the employee table, joining on the reportsto column.
select * from employee a join employee b on (a.reports_to = b.reports_to);